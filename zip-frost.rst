::

  ZIP: Unassigned {numbers are assigned by ZIP editors}
  Title: FROST for Spend Authorization Signatures
  Owners: Chelsea Komlo <ckomlo@uwaterloo.ca>
          Conrado Gouvea <conrado@zfnd.org>
          Deirdre Connolly <deirdre@zfnd.org>
  Credits: First Credited
           ...
  Status: Draft
  Category: Wallet
  Created: 2022-08-dd
  License: {usually MIT}
  Pull-Request: <https://github.com/zcash/zips/pull/TODO>


Terminology
===========

{Edit this to reflect the key words that are actually used.}
The key words "MUST", "MUST NOT", "SHOULD", and "MAY" in this document are to
be interpreted as described in RFC 2119. [#RFC2119]_

The terms below are to be interpreted as follows:

{Term to be defined}
  {Definition.}
{Another term}
  {Definition.}


Abstract
========

This proposal defines the usage of FROST [#FROST]_, a threshold signature scheme,
to generate signatures compatible with spend authorization signatures in the Zcash
protocol, for the Sapling and Orchard network upgrades.


Motivation
==========

In the Zcash protocol, Spend Authorization Signatures are employed to effectively
authorize a transaction. The ability to generate these signatures with the user's
private key is what effectively allows the to spend funds.

This is security-critical step, since anyone who obtains access to the private
key will be able to spend the user's funds. For this reason, one interesting
possibility is to require multiple entities to allow the transaction to go through.
This can be accomplished with threshold signatures, where... (TODO: explain)

FROST is one of such threshold signatures protocols. (TODO: more about FROST)


Requirements
============

- All signatures generated by following this ZIP MUST be verified successfully
  as Sapling or Orchard spend authorization signatures.
- (Must keep same security requirements from the spec?)
- (Randomizer security requirements?)


Non-requirements
================

- (Talk about how proof generation is not covered?)


Specification
=============

Re-randomized FROST
-------------------

To add re-randomization to FROST, follow the specification [#FROST]_ with the
following modifications:

In Round Two, the Coordinator also generates a random scalar α by following the
RedDSA.GenRandom procedure and sends it to each signer along with the message
and the set of signing commitments.

The `sign` function is changed to receive α and incorporate it into the
computation of `sig_share`. It is specified as the following: ::

  Inputs:
  - identifier, Identifier i of the signer. Note identifier will never equal 0.
  - sk_i, Signer secret key share, a Scalar.
  - group_public_key, public key corresponding to the group signing key,
    an Element in G.
  - nonce_i, pair of Scalar values (hiding_nonce, binding_nonce) generated in
    round one.
  - msg, the message to be signed (sent by the Coordinator).
  - commitment_list =
      [(j, hiding_nonce_commitment_j, binding_nonce_commitment_j), ...], a
    list of commitments issued in Round 1 by each signer and sent by the Coordinator.
    Each element in the list indicates the signer identifier j and their two commitment
    Element values (hiding_nonce_commitment_j, binding_nonce_commitment_j).s
    This list MUST be sorted in ascending order by signer identifier.
  - alpha, the randomizer Scalar.

  Outputs: a Scalar value representing the signature share

  def sign(identifier, sk_i, group_public_key, nonce_i, msg, commitment_list, alpha):
    # Encode the commitment list
    encoded_commitments = encode_group_commitment_list(commitment_list)

    # Compute the binding factor
    binding_factor = compute_binding_factor(encoded_commitments, msg)

    # Compute the group commitment
    group_commitment = compute_group_commitment(commitment_list, binding_factor)

    # Compute Lagrange coefficient
    participant_list = participants_from_commitment_list(commitment_list)
    lambda_i = derive_lagrange_coefficient(identifier, participant_list)

    # Compute the per-message challenge
    challenge = compute_challenge(group_commitment, group_public_key, msg)

    # Compute the signature share
    (hiding_nonce, binding_nonce) = nonce_i
    sig_share = hiding_nonce + (binding_nonce * binding_factor) + (lambda_i * (sk_i + alpha / len(commitment_list))  * challenge)

    return sig_share


When the Coordinator outputs the signature, the Coordinator must also compute and
output G.ScalarBaseMult(α).


Ciphersuites
------------

FROST(RedJubjub, BLAKE2b-512)
'''''''''''''''''''''''''''''

This ciphersuite uses Jubjub for the Group and BLAKE2b-512 for the Hash function `H`
meant to produce signatures indistinguishable from RedJubjub Sapling Spend
Authorization Signatures as specified in [#protocol]_.

- Group: Jubjub [#protocol]_

  - Order: 6554484396890773809930967563523245729705921265872317281365359162392183254199 (see [#protocol]_)
  - Identity: as defined in [#protocol]_
  - RandomScalar: Implemented by generating a random 64-byte string and invoking
    DeserializeScalar on the result
  - RandomNonZeroScalar: Implemented by generating a random 32-byte string that
    is not equal to the all-zero string and invoking DeserializeScalar on the result.
  - SerializeElement(P): Implemented as `LEBS2OSP_{ℓG}(repr_G(P))`, where LEBS2OSP and repr_G
    are defined in [#protocol]_
    [TODO: how to specify this? It's awkward to do this way, should we expand
    the definitions?]
  - DeserializeElement: Implemented as `abst_G(LEOS2BSP_{ℓG}(P))`, where LEOS2BSP and abst_G
    are defined in [#protocol]_
  - SerializeScalar: Implemented by outputting the little-endian 32-byte encoding
    of the Scalar value.
  - DeserializeScalar: Implemented by attempting to deserialize a Scalar from a
    32-byte string. This function can fail if the input does not represent a Scalar
    between the value 0 and G.Order() - 1.

- Hash (`H`): BLAKE2b-512 [#BLAKE]_ (BLAKE2b with 512-bit output and 16-byte personalization string),
  and Nh = 64.

  - H1(m): Implemented by computing BLAKE2b-512("FROST_RedJubjubRh", m), interpreting
    the 64 bytes as a little-endian integer, and reducing the resulting integer
    modulo L = 6554484396890773809930967563523245729705921265872317281365359162392183254199.
    [TODO: what context string to use?]
  - H2(m): LEOS2IP_{ℓ_H}(H(m)) (mod G.Order())
    / Implemented by computing BLAKE2b-512("Zcash_RedJubjubH ", m), interpreting
    the 64 bytes as a little-endian integer, and reducing the resulting integer
    modulo L = 6554484396890773809930967563523245729705921265872317281365359162392183254199.
    [TODO: use original expression or expand the definitions as above?]
  - H3(m): Implemented by computing BLAKE2b-512("FROST_RedJubjubDi", m)
    [TODO: what context string to use?]
  - H4(m): Implemented by computing BLAKE2b-512("FROST_RedJubjubNo", m), interpreting
    the 64 bytes as a little-endian integer, and reducing the resulting integer
    modulo L = 6554484396890773809930967563523245729705921265872317281365359162392183254199.
    [TODO: what context string to use?]


FROST(RedPallas, BLAKE2b-512)
'''''''''''''''''''''''''''''

This ciphersuite uses Pallas for the Group and BLAKE2b-512 for the Hash function `H`
meant to produce signatures indistinguishable from RedPallas Sapling Spend
Authorization Signatures as specified in [#protocol]_.

- Group: Pallas [#protocol]_

  - Order: 0x40000000000000000000000000000000224698fc0994a8dd8c46eb2100000001 (see [#protocol]_)
  - Identity: as defined in [#protocol]_
  - RandomScalar: Implemented by generating a random 64-byte string and invoking
    DeserializeScalar on the result
  - RandomNonZeroScalar: Implemented by generating a random 32-byte string that
    is not equal to the all-zero string and invoking DeserializeScalar on the result.
  - SerializeElement(P): Implemented as `LEBS2OSP_{ℓG}(repr_G(P))`, where LEBS2OSP and repr_G
    are defined in [#protocol]_
    [TODO: how to specify this? It's awkward to do this way, should we expand
    the definitions?]
  - DeserializeElement: Implemented as `abst_G(LEOS2BSP_{ℓG}(P))`, where LEOS2BSP and abst_G
    are defined in [#protocol]_
  - SerializeScalar: Implemented by outputting the little-endian 32-byte encoding
    of the Scalar value.
  - DeserializeScalar: Implemented by attempting to deserialize a Scalar from a
    32-byte string. This function can fail if the input does not represent a Scalar
    between the value 0 and G.Order() - 1.

- Hash (`H`): BLAKE2b-512 [#BLAKE]_ (BLAKE2b with 512-bit output and 16-byte personalization string),
  and Nh = 64.

  - H1(m): Implemented by computing BLAKE2b-512("FROST_RedPallasRh", m), interpreting
    the 64 bytes as a little-endian integer, and reducing the resulting integer
    modulo L = 0x40000000000000000000000000000000224698fc0994a8dd8c46eb2100000001.
    [TODO: what context string to use?]
  - H2(m): LEOS2IP_{ℓ_H}(H(m)) (mod G.Order())
    / Implemented by computing BLAKE2b-512("Zcash_RedPallasH ", m), interpreting
    the 64 bytes as a little-endian integer, and reducing the resulting integer
    modulo L = 0x40000000000000000000000000000000224698fc0994a8dd8c46eb2100000001.
    [TODO: use original expression or expand the definitions as above?]
  - H1(m): Implemented by computing BLAKE2b-512("FROST_RedPallasDi", m).
    [TODO: what context string to use?]
  - H4(m): Implemented by computing BLAKE2b-512("FROST_RedPallasNo", m), interpreting
    the 64 bytes as a little-endian integer, and reducing the resulting integer
    modulo L = 0x40000000000000000000000000000000224698fc0994a8dd8c46eb2100000001.
    [TODO: what context string to use?]


Reference implementation
========================

TODO: add links to implementation


References
==========

.. [#BLAKE] `BLAKE2: simpler, smaller, fast as MD5 <https://blake2.net/#sp>`_
.. [#RFC2119] `RFC 2119: Key words for use in RFCs to Indicate Requirement Levels <https://www.rfc-editor.org/rfc/rfc2119.html>`_
.. [#FROST] `Draft RFC: Two-Round Threshold Schnorr Signatures with FROST <https://www.ietf.org/archive/id/draft-irtf-cfrg-frost-05.html>`_
.. [#protocol] `Zcash Protocol Specification, Version 2022.3.0 or later <protocol/protocol.pdf>`_
.. [#protocol-introduction] `Zcash Protocol Specification, Version 2020.1.24. Section 1: Introduction <protocol/protocol.pdf#introduction>`_
.. [#zip-0000] `ZIP 0: ZIP Process <zip-0000.rst>`_
